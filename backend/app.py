import os
import mysql.connector
from flask import Flask, request, render_template_string
from dotenv import load_dotenv

# .env dosyasÄ±ndaki ortam deÄŸiÅŸkenlerini yÃ¼kle
load_dotenv()

# Flask uygulamasÄ±nÄ± baÅŸlat
app = Flask(__name__)

# Anket sorularÄ± listesi
QUESTIONS = [
    "Bu projeyi faydalÄ± buldum.",
    "Docker kullanÄ±mÄ± kolaydÄ±.",
    "Flask ile Ã§alÄ±ÅŸmak keyifliydi.",
    "VeritabanÄ± baÄŸlantÄ±sÄ± zorlayÄ±cÄ±ydÄ±.",
    "Docker Compose mantÄ±ÄŸÄ±nÄ± anladÄ±m.",
    "Ortam deÄŸiÅŸkenleri yÃ¶netilebilir.",
    "Kod yapÄ±sÄ± sade ve anlaÅŸÄ±lÄ±r.",
    "GeliÅŸtirme ortamÄ±nÄ± kolay kurdum.",
    "Test etmek basitti.",
    "Bu teknolojileri tekrar kullanÄ±rÄ±m."
]

# HTML + CSS + JS iÃ§eren form ÅŸablonu
# Dark mode butonu eklendi, gÃ¶rÃ¼nÃ¼m modernleÅŸtirildi
FORM_TEMPLATE = """
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Survey</title>
    <style>
      :root {
        --bg-color: #f9f9f9;
        --text-color: #222;
        --card-bg: #fff;
        --button-bg: #007bff;
        --button-color: #fff;
      }
      body.dark-mode {
        --bg-color: #121212;
        --text-color: #e0e0e0;
        --card-bg: #1e1e1e;
        --button-bg: #444;
        --button-color: #fff;
      }

      body {
        background-color: var(--bg-color);
        color: var(--text-color);
        font-family: 'Segoe UI', sans-serif;
        margin: 0;
        padding: 0;
        transition: background-color 0.3s ease, color 0.3s ease;
      }

      .container {
        max-width: 800px;
        margin: auto;
        padding: 30px;
      }

      h1 {
        text-align: center;
        margin-bottom: 30px;
      }

      .question {
        background-color: var(--card-bg);
        padding: 20px;
        margin-bottom: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      }

      label {
        margin-right: 20px;
      }

      button, .dark-toggle {
        background-color: var(--button-bg);
        color: var(--button-color);
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 20px;
      }

      .dark-toggle {
        float: right;
      }

      .message {
        margin-top: 20px;
        text-align: center;
        font-weight: bold;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <button class="dark-toggle" onclick="toggleDarkMode()">ğŸŒ™</button>
      <h1>AÃ§Ä±k KaynaklÄ± YazÄ±lÄ±mlar Dersi Proje DeÄŸerlendirme Anketi</h1>
      <form method="POST">
        {% for question in questions %}
          <div class="question">
            <p><strong>{{ loop.index }}. {{ question }}</strong></p>
            <label><input type="radio" name="q{{ loop.index0 }}" value="agree" required> KatÄ±lÄ±yorum</label>
            <label><input type="radio" name="q{{ loop.index0 }}" value="neutral"> KararsÄ±zÄ±m</label>
            <label><input type="radio" name="q{{ loop.index0 }}" value="disagree"> KatÄ±lmÄ±yorum</label>
          </div>
        {% endfor %}
        <button type="submit">GÃ¶nder</button>
      </form>
      {% if submitted %}
        <div class="message">TeÅŸekkÃ¼rler! CevaplarÄ±nÄ±z kaydedildi.</div>
      {% endif %}
    </div>

    <!-- Dark mode tercihinin kalÄ±cÄ±lÄ±ÄŸÄ± iÃ§in localStorage kullanÄ±lÄ±yor -->
    <script>
      function toggleDarkMode() {
        document.body.classList.toggle('dark-mode');
        localStorage.setItem('theme', document.body.classList.contains('dark-mode') ? 'dark' : 'light');
      }

      // Sayfa yÃ¼klenince tema tercihi uygulanÄ±yor
      window.onload = function () {
        if (localStorage.getItem('theme') === 'dark') {
          document.body.classList.add('dark-mode');
        }
      }
    </script>
  </body>
</html>
"""

# VeritabanÄ± baÄŸlantÄ±sÄ± iÃ§in yardÄ±mcÄ± fonksiyon
def get_db_connection():
    return mysql.connector.connect(
        host=os.getenv("MYSQL_HOST"),
        user=os.getenv("MYSQL_USER"),
        password=os.getenv("MYSQL_PASSWORD"),
        database=os.getenv("MYSQL_DATABASE")
    )

# Ana route: hem formu gÃ¶sterir hem de gÃ¶nderilen verileri iÅŸler
@app.route("/", methods=["GET", "POST"])
def survey():
    submitted = False
    if request.method == "POST":
        # Formdan gelen yanÄ±tlarÄ± sÄ±rayla al
        answers = [request.form.get(f"q{i}") for i in range(10)]
        try:
            # VeritabanÄ±na baÄŸlan ve INSERT iÅŸlemi yap
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO poll_responses
                (q1, q2, q3, q4, q5, q6, q7, q8, q9, q10)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, answers)
            conn.commit()
            cursor.close()
            conn.close()
            submitted = True
        except Exception as e:
            print("Hata:", e)  # Hata terminale yazdÄ±rÄ±lÄ±r
    # Form sayfasÄ± render edilir, anket sorularÄ± ve durum bilgisi gÃ¶nderilir
    return render_template_string(FORM_TEMPLATE, questions=QUESTIONS, submitted=submitted)

# Uygulama doÄŸrudan Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±ÄŸÄ±nda baÅŸlatÄ±lÄ±r
if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
